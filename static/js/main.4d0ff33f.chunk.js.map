{"version":3,"sources":["components/buttonChoices.jsx","components/playerChoiceChart.jsx","App.js","index.js","rock.png","paper.png","scissors.png"],"names":["winningCompare","playerChoice","props","AIchoice","0","1","2","Math","floor","random","changeScoreState","RPSButtons","id","onClick","src","rockPicture","alt","paperPicture","scissorPicture","PlayerChoiceChart","data","labels","datasets","this","state","playerRockCount","playerPaperCount","playerScissorCount","backgroundColor","hoverBackgroundColor","AIdata","AIRockCount","AIPaperCount","AIScissorCount","options","legend","boxWidth","fontColor","React","Component","App","wins","draws","losses","recentPlayerChoice","recentAIChoice","recentMatchMsg","updateScores","WDLinfo","AIChoice","matchOutcome","setState","currentState","currentWDLValue","currentPlayerRPSCount","currentAIRPSCount","className","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.4d0ff33f.chunk.js","sourcesContent":["import React from \"react\";\nimport rockPicture from \"../rock.png\";\nimport paperPicture from \"../paper.png\";\nimport scissorPicture from \"../scissors.png\";\n\nconst RPSButtons = props => {\n  return (\n    <div>\n      <button\n        id=\"rockButton\"\n        onClick={() => {\n          winningCompare(\"Rock\", props);\n        }}\n      >\n        <img id=\"rock\" src={rockPicture} alt=\"rock\"></img>\n      </button>\n      <button\n        id=\"paperButton\"\n        onClick={() => {\n          winningCompare(\"Paper\", props);\n        }}\n      >\n        <img id=\"paper\" src={paperPicture} alt=\"paper\"></img>\n      </button>\n      <button\n        id=\"scissorsButton\"\n        onClick={() => {\n          winningCompare(\"Scissors\", props);\n        }}\n      >\n        <img id=\"scissors\" src={scissorPicture} alt=\"scissors\"></img>\n      </button>\n    </div>\n  );\n};\n\nconst winningCompare = (playerChoice, props) => {\n  let randNum = Math.floor(Math.random() * (2 - 0 + 1) + 0);\n  const RPSObj = { 0: \"Rock\", 1: \"Paper\", 2: \"Scissors\" };\n  const AIchoice = RPSObj[randNum];\n\n  // Winning conditions\n  // Rock\n  if (playerChoice === \"Rock\" && AIchoice === \"Rock\") {\n    props.changeScoreState(\n      \"draws\",\n      \"playerRockCount\",\n      \"AIRockCount\",\n      playerChoice,\n      AIchoice,\n      \"Draw\"\n    );\n  }\n  if (playerChoice === \"Rock\" && AIchoice === \"Scissors\") {\n    props.changeScoreState(\n      \"wins\",\n      \"playerRockCount\",\n      \"AIScissorCount\",\n      playerChoice,\n      AIchoice,\n      \"You won!\"\n    );\n  }\n  if (playerChoice === \"Rock\" && AIchoice === \"Paper\") {\n    props.changeScoreState(\n      \"losses\",\n      \"playerRockCount\",\n      \"AIPaperCount\",\n      playerChoice,\n      AIchoice,\n      \"You lost :(\"\n    );\n  }\n\n  //Paper\n  if (playerChoice === \"Paper\" && AIchoice === \"Paper\") {\n    props.changeScoreState(\n      \"draws\",\n      \"playerPaperCount\",\n      \"AIPaperCount\",\n      playerChoice,\n      AIchoice,\n      \"Draw\"\n    );\n  }\n  if (playerChoice === \"Paper\" && AIchoice === \"Rock\") {\n    props.changeScoreState(\n      \"wins\",\n      \"playerPaperCount\",\n      \"AIRockCount\",\n      playerChoice,\n      AIchoice,\n      \"You won!\"\n    );\n  }\n  if (playerChoice === \"Paper\" && AIchoice === \"Scissors\") {\n    props.changeScoreState(\n      \"losses\",\n      \"playerPaperCount\",\n      \"AIScissorCount\",\n      playerChoice,\n      AIchoice,\n      \"You lost :(\"\n    );\n  }\n\n  //Scissors\n  if (playerChoice === \"Scissors\" && AIchoice === \"Scissors\") {\n    props.changeScoreState(\n      \"draws\",\n      \"playerScissorCount\",\n      \"AIScissorCount\",\n      playerChoice,\n      AIchoice,\n      \"Draw\"\n    );\n  }\n  if (playerChoice === \"Scissors\" && AIchoice === \"Paper\") {\n    props.changeScoreState(\n      \"wins\",\n      \"playerScissorCount\",\n      \"AIPaperCount\",\n      playerChoice,\n      AIchoice,\n      \"You won!\"\n    );\n  }\n  if (playerChoice === \"Scissors\" && AIchoice === \"Rock\") {\n    props.changeScoreState(\n      \"losses\",\n      \"playerScissorCount\",\n      \"AIRockCount\",\n      playerChoice,\n      AIchoice,\n      \"You lost :(\"\n    );\n  }\n};\n\nexport default RPSButtons;\n","import React from \"react\";\nimport { Pie } from \"react-chartjs-2\";\n\nclass PlayerChoiceChart extends React.Component {\n  render() {\n    const data = {\n      labels: [\"Rock\", \"Paper\", \"Scissors\"],\n      datasets: [\n        {\n          data: [\n            this.props.state.playerRockCount,\n            this.props.state.playerPaperCount,\n            this.props.state.playerScissorCount\n          ],\n          backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],\n          hoverBackgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"]\n        }\n      ]\n    };\n\n    const AIdata = {\n      labels: [\"Rock\", \"Paper\", \"Scissors\"],\n      datasets: [\n        {\n          data: [\n            this.props.state.AIRockCount,\n            this.props.state.AIPaperCount,\n            this.props.state.AIScissorCount\n          ],\n          backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],\n          hoverBackgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"]\n        }\n      ]\n    };\n\n    const options = {\n      legend: {\n        labels: {\n          boxWidth: 30,\n          fontColor: \"#199\"\n        }\n      }\n    };\n\n    return (\n      <div id=\"chartContainer\">\n        <div id=\"playerChart\">\n          <h3 id=\"playerChartHeader\">Player Choices</h3>\n          <div>\n            <Pie data={data} options={options} />\n          </div>\n        </div>\n        <div id=\"chartSpacer\"></div>\n        <div id=\"AIChart\">\n          <h3 id=\"AIChartHeader\">CPU Choices</h3>\n          <div>\n            <Pie data={AIdata} options={options} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlayerChoiceChart;\n","import React from \"react\";\nimport \"./index.css\";\nimport RPSButtons from \"./components/buttonChoices\";\nimport PlayerChoiceChart from \"./components/playerChoiceChart\";\n\nclass App extends React.Component {\n  state = {\n    wins: 0,\n    draws: 0,\n    losses: 0,\n    playerRockCount: 0,\n    playerPaperCount: 0,\n    playerScissorCount: 0,\n    AIRockCount: 0,\n    AIPaperCount: 0,\n    AIScissorCount: 0,\n    recentPlayerChoice: \" -\",\n    recentAIChoice: \" -\",\n    recentMatchMsg: \" -\"\n  };\n\n  updateScores = (\n    WDLinfo,\n    playerChoice,\n    AIChoice,\n    recentPlayerChoice,\n    recentAIChoice,\n    matchOutcome\n  ) => {\n    this.setState(() => {\n      return { recentMatchMsg: matchOutcome };\n    });\n    this.setState(() => {\n      return { recentPlayerChoice: recentPlayerChoice };\n    });\n    this.setState(() => {\n      return { recentAIChoice: recentAIChoice };\n    });\n    this.setState(currentState => {\n      let currentWDLValue = currentState[WDLinfo];\n      if (currentWDLValue || currentWDLValue === 0) {\n        return { [WDLinfo]: ++currentWDLValue };\n      }\n    });\n    this.setState(currentState => {\n      let currentPlayerRPSCount = currentState[playerChoice];\n      if (currentPlayerRPSCount || currentPlayerRPSCount === 0) {\n        return { [playerChoice]: ++currentPlayerRPSCount };\n      }\n    });\n    this.setState(currentState => {\n      let currentAIRPSCount = currentState[AIChoice];\n      if (currentAIRPSCount || currentAIRPSCount === 0) {\n        return { [AIChoice]: ++currentAIRPSCount };\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Choose Rock, Paper or Scissors</p>\n          <RPSButtons changeScoreState={this.updateScores} />\n          <div id=\"choiceContainer\">\n            <p id=\"playerChoice\">Player: {this.state.recentPlayerChoice}</p>\n            <p id=\"choiceSpacer\"></p>\n            <p id=\"AIChoice\">CPU: {this.state.recentAIChoice}</p>\n          </div>\n          <div>\n            <p>Match outcome: {this.state.recentMatchMsg}</p>\n          </div>\n          <div>\n            <p>\n              Wins: {this.state.wins} | Draws: {this.state.draws} | Losses:{\" \"}\n              {this.state.losses}\n            </p>\n          </div>\n          <PlayerChoiceChart state={this.state} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/rock.f3c7e8fa.png\";","module.exports = __webpack_public_path__ + \"static/media/paper.7ff010c6.png\";","module.exports = __webpack_public_path__ + \"static/media/scissors.6c9748c7.png\";"],"sourceRoot":""}